# HELK Zeek and Corelight main configuration that applies to all logs
# HELK build Stage: Alpha
# Author: Nate Guagenti (@neu5ron)
# License: GPL-3.0

filter {
  if [type] == "zeek" or [etl_kafka_topic] == "zeek" or [etl_kafka_topic] =~ "^corelight" {

    # (Original event) message field kept
    if [message] {
      # Store original
      mutate {
        copy => {
          "message" => "event_original_message"
        }
      }
      # original event kept but not already JSON expanded
      if ![ts] {
        json {
          source => "message"
          tag_on_failure => [ "_parsefailure", "parsefailure-critical", "parsefailure-json_codec" ]
          remove_field => [ "message" ]
          add_field => { "etl_pipeline" => "zeek-json-conversion" }
          skip_on_invalid_json => true
        }
      }
      # else, original event kept but JSON already applied nothing to do
    }

    # For some reason has no fields the way it should
    if ![ts] {
      mutate {
        add_field => { "etl_pipeline" => "zeek-format-unkown" }
        add_tag => [ "parsefailure-critical" ]
      }
    }
    # else JSON already applied nothing to do

    # Corelight specific, Corelight can be distinguished from open source zeek simply by the difference that corelight has the field `_write_ts`
    if [_write_ts] {
      mutate {
        add_field => { "event_vendor" => "Corelight" }
      }
      date {
        match => [ "_write_ts", "ISO8601" ]
        timezone => "UTC"
        target => "event_recorded_time"
        remove_field => "_write_ts"
        tag_on_failure => [ "_parsefailure", "parsefailure-date-event_recorded_time", "parsefailure-date-_write_ts" ]
        add_field => { "etl_pipeline" => "zeek-corelight-date-_write_ts" }
      }
    }

    # Perform date conversion
    if [event_vendor] == "Corelight" {
      # Corelight already converts Unix TS so need to perform differently than opensource
      date {
        match => [ "ts", "ISO8601" ]
        timezone => "UTC"
        target => "@timestamp"
        remove_field => "ts"
        tag_on_failure => [ "_parsefailure", "parsefailure-critical", "parsefailure-date-@timestamp", "parsefailure-date-corelight-ts" ]
        add_field => {
          "event_original_time" => "%{@timestamp}"
          "etl_pipeline" => "zeek_corelight_timestamp"
        }
      }
    }
    else {
      # Zeek uses UNIX/EPOCH timestamp
      date {
        match => [ "ts", "UNIX" ]
        timezone => "UTC"
        target => "@timestamp"
        remove_field => "ts"
        tag_on_failure => [ "_parsefailure", "parsefailure-critical", "parsefailure-date-@timestamp", "parsefailure-date-zeek-ts" ]
        add_field => {
          "etl_pipeline" => "zeek_timestamp"
        }
      }
    }

    # Slight variation in host name (where the log came from)
    if [_system_name] {
      mutate {
        rename => {
          "_system_name" => "host_name"
        }
      }
    }
    else if [@sensor] {
      mutate {
        rename => {
          "@sensor" => "host_name"
        }
      }
    }
    else if [@system] {
      mutate {
        rename => {
          "@system" => "host_name"
        }
      }
    }
    # Slight variation in certain field for ports/IP
    if [id.orig_h] or [id.resp_h] {
      mutate {
        rename => {
          "id.orig_h" => "src_ip_addr"
          "id.orig_p" => "src_port"
          "id.resp_h" => "dst_ip_addr"
          "id.resp_p" => "dst_port"
          "id.vlan" => "network_outer_vlan_id"
        }
      }
    }
    else {
      mutate {
        rename => {
          "id_orig_h" => "src_ip_addr"
          "id_orig_p" => "src_port"
          "id_resp_h" => "dst_ip_addr"
          "id_resp_p" => "dst_port"
          "id_vlan" => "network_outer_vlan_id"
        }
      }
    }
    # Slight variation in log name
    if [_path] {
      mutate {
        rename => { "_path" => "event_sub_type" }
      }
    }
    else if [@stream] {
      mutate {
        rename => { "@stream" => "event_sub_type" }
      }
    }

    # Normalizations that apply to all logs
    mutate {
      rename => {
        "cert_chain_fuids" => "zeek_id_cert_chain_fuids"
        "client_cert_chain_fuids" => "zeek_id_client_cert_chain_fuids"
        "client_cert_fuid" => "zeek_id_client_cert_fuid"
        "community_id" => "fingerprint_network_community_id"
        "conn_uids" => "zeek_id_conn_uids"
        "fid" => "zeek_id_fid"
        "fuid" => "zeek_id_fuid"
        "fuids" => "zeek_id_fuids"
        "id" => "zeek_id_id"
        "inner_vlan" => "network_inner_vlan_id"
        "orig_fuids" => "zeek_id_orig_fuids"
        "outer_vlan" => "network_outer_vlan_id"
        "parent_fuid" => "zeek_id_parent_fuid"
        "proto" => "network_protocol"
        "related_fuids" => "zeek_id_related_fuids"
        "resp_fuids" => "zeek_id_resp_fuids"
        "server_cert_fuid" => "zeek_id_server_cert_fuid"
        "uid" => "zeek_id_uid"
        "uids" => "zeek_id_uids"
        "uuid" => "zeek_id_uuid"
        "vlan" => "network_outer_vlan_id"
      }
      add_field => { "event_type" => "zeek" }
      copy => { "zeek_id_uid" => "event_uid" }
    }


    ## Event Type
    #mutate {
    #  add_field => {
    #    "event_category_type" => "network"
    #    # "[@metadata][index_name]" => "network"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_category_type" => "miscellaneous"
    #    # "[@metadata][index_name]" => "miscellaneous"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_category_type" => "detection"
    #    # "[@metadata][index_name]" => "detection"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_category_type" => "miscellaneous"
    #    # "[@metadata][index_name]" => "miscellaneous"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_category_type" => "netcontrol"
    #    # "[@metadata][index_name]" => "netcontrol"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_category_type" => "observations"
    #    # "[@metadata][index_name]" => "observations"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_category_type" => "files"
    #    # "[@metadata][index_name]" => "files"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_category_type" => "diagnostics"
    #    # "[@metadata][index_name]" => "diagnostics"
    #  }
    #}
    #mutate {
    #  add_field => {
    #    "event_category_type" => "unknown"
    #    # "[@metadata][index_name]" => "unknown"
    #  }
    #}

  }
}
