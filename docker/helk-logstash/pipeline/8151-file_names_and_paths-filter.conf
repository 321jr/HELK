filter {
  if [file_dst_path] {

    ruby {
      code => '
        file = event.get("[file_dst_path]")
        if file.is_a? Enumerable
  
          all_file_has_non_ascii = Array.new
          all_file_has_underscores = Array.new
          all_file_length = Array.new

          for f in file
            all_file_has_non_ascii.push(false === f.ascii_only?)
            all_file_has_underscores.push(f.include?("___"))
            all_file_length.push(f.length)
          end

          event.set("[meta_hunt_file_dst][path_has_non_ascii]", all_file_has_non_ascii.include?(true))
          event.set("[meta_hunt_file_dst][path_has_underscores]", all_file_has_underscores.include?(true))
          event.set("file_dst_path_total_length", all_file_length.uniq)                     
          
        else
          if !file.nil?
            has_non_ascii = false === file.ascii_only?
            contains_underscores = file.include?("___")
            file_length = file.length

            event.set("[meta_hunt_file_dst][path_has_non_ascii]", has_non_ascii)
            event.set("[meta_hunt_file_dst][path_has_underscores]", contains_underscores)
            event.set("file_dst_path_total_length", file_length)
          end
  
        end
      '
      add_field => { "etl_pipeline" => "ruby-8812-001-0001" }
      id => "ruby-8812-001"
      tag_on_exception =>  "_rubyexception_8812_1-0001"
    }

    # Fingerprint UserID/user_src_sid and FilePath----Use this with caution for filtering
    if [user_src_sid] {
      fingerprint {
        source => [ "file_dst_path", "user_src_sid" ]
        concatenate_sources => true
        method => "MURMUR3"
        target => "[fp][win][file_dst_path_and_sid]"
        key => "logstash"
        add_field => { "etl_pipeline" => "fingerprint-8812-001-0001" }
        id => "fingerprint-8812-001-0001"
      }
    }
  }
  if [file_dst_name] {

    ruby {
      code => '
        file = event.get("[file_dst_name]")
        if file.is_a? Enumerable

          all_file_has_non_ascii = Array.new
          all_file_has_underscores = Array.new
          all_file_length = Array.new
          all_file_extension = Array.new

          for f in file
            all_file_has_non_ascii.push(false === f.ascii_only?)
            all_file_has_underscores.push(f.include?("___"))
            all_file_length.push(f.length)
            f_extension = File.extname(f)
            if !f_extension.empty?
                all_file_extension.push(f_extension[1..-1])
            end
          end

          event.set("[meta_hunt_file_dst][name_has_non_ascii]", all_file_has_non_ascii.include?(true))
          event.set("[meta_hunt_file_dst][name_has_underscores]", all_file_has_underscores.include?(true))
          event.set("file_dst_name_length", all_file_length.uniq)
          if !all_file_extension.empty?
              event.set("file_dst_name_extension", all_file_extension.uniq)
          end
            
        else
          if !file.nil?
            has_non_ascii = false === file.ascii_only?
            contains_underscores = file.include?("___")
            file_length = file.length
            f_extension = File.extname(file)
            if !f_extension.empty?
                event.set("file_dst_name_extension", f_extension[1..-1])
            end

            event.set("[meta_hunt_file_dst][name_has_non_ascii]", has_non_ascii)
            event.set("[meta_hunt_file_dst][name_has_underscores]", contains_underscores)
            event.set("file_dst_name_length", file_length)
          end

        end
      '
      add_field => { "etl_pipeline" => "ruby-8812-002-0001-0001" }
      id => "ruby-8812-002-0001-0001"
      tag_on_exception =>  "_rubyexception_8812_2-0001-0001"
    }

    # Fingerprint UserID/user_src_sid and FileName----Use this with caution for filtering
    if [user_src_sid] {
      fingerprint {
        source => [ "file_dst_name", "user_src_sid" ]
        concatenate_sources => true
        method => "MURMUR3"
        target => "[fp][win][file_dst_name_and_sid]"
        key => "logstash"
        add_field => { "etl_pipeline" => "fingerprint-8812-002-0001" }
        id => "fingerprint-8812-002-0001"
      }
    }
  }
  if [file_src_path] {

    ruby {
      code => '
        file = event.get("[file_src_path]")
        if file.is_a? Enumerable
  
          all_file_has_non_ascii = Array.new
          all_file_has_underscores = Array.new
          all_file_length = Array.new
  
          for f in file
            all_file_has_non_ascii.push(has_non_ascii = false === f.ascii_only?)
            all_file_has_underscores.push(f.include?("___"))
            all_file_length.push(f.length)
          end
  
          all_file_length = all_file_length.uniq

          event.set("[meta_hunt_file_src][path_has_non_ascii]", all_file_has_non_ascii.include?(true))
          event.set("[meta_hunt_file_src][path_has_underscores]", all_file_has_underscores.include?(true))
          event.set("file_src_path_total_length", all_file_length)
            
        else
          if !file.nil?
            has_non_ascii = false === file.ascii_only?
            contains_underscores = file.include?("___")
            file_length = file.length

            event.set("[meta_hunt_file_src][path_has_non_ascii]", has_non_ascii)
            event.set("[meta_hunt_file_src][path_has_underscores]", contains_underscores)
            event.set("file_src_path_total_length", file_length)
          end
  
        end
      '
      add_field => { "etl_pipeline" => "ruby-8812-003-0001" }
      id => "ruby-8812-003-0001"
      tag_on_exception =>  "_rubyexception_8812_3-0001"
    }

    # Fingerprint UserID/user_src_sid and FilePath----Use this with caution for filtering
    if [user_src_sid] {
      fingerprint {
        source => [ "file_src_path", "user_src_sid" ]
        concatenate_sources => true
        method => "MURMUR3"
        target => "[fp][win][file_src_path_and_sid]"
        key => "logstash"
        add_field => { "etl_pipeline" => "fingerprint-8812-003-0001" }
        id => "fingerprint-8812-003-0001"
      }
    }
  }
  if [file_src_name] {

    ruby {
      code => '
        file = event.get("[file_src_name]")
        if file.is_a? Enumerable

          all_file_has_non_ascii = Array.new
          all_file_has_underscores = Array.new
          all_file_length = Array.new
          all_file_extension = Array.new

          for f in file
            all_file_has_non_ascii.push(false === f.ascii_only?)
            all_file_has_underscores.push(f.include?("___"))
            all_file_length.push(f.length)
            f_extension = File.extname(f)
            if !f_extension.empty?
              all_file_extension.push(f_extension[1..-1])
            end
          end

          event.set("[meta_hunt_file_src][name_has_non_ascii]", all_file_has_non_ascii.include?(true))
          event.set("[meta_hunt_file_src][name_has_underscores]", all_file_has_underscores.include?(true))
          event.set("file_src_name_length", all_file_length)
          if !all_file_extension.empty?
            event.set("file_dst_name_extension", all_file_extension.uniq)
          end
            
        else
          if !file.nil?
            has_non_ascii = false === file.ascii_only?
            contains_underscores = file.include?("___")
            file_length = file.length
            f_extension = File.extname(file)
            if !f_extension.empty?
              event.set("file_dst_name_extension", f_extension[1..-1])
            end

            event.set("[meta_hunt_file_src][name_has_non_ascii]", has_non_ascii)
            event.set("[meta_hunt_file_src][name_has_underscores]", contains_underscores)
            event.set("file_src_name_length", file_length)
          end
        end
      '
      add_field => { "etl_pipeline" => "ruby-8812-004-0001" }
      id => "ruby-8812-004-0001"
      tag_on_exception =>  "_rubyexception_8812_4-0001"
    }

    # Fingerprint UserID/user_src_sid and FileName----Use this with caution for filtering
    if [user_src_sid] {
      fingerprint {
        source => [ "file_src_name", "user_src_sid" ]
        concatenate_sources => true
        method => "MURMUR3"
        target => "[fp][win][file_src_name_and_sid]"
        key => "logstash"
        add_field => { "etl_pipeline" => "fingerprint-8812-004-0001" }
        id => "fingerprint-8812-004-0001"
      }
    }
  }
}